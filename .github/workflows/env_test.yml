##************************************************************************
 # File Name: env_test.yml
 # Author: Carbon (ecrasy@gmail.com)
 # Created Time: 2022-07-16 15:39:29 UTC
 # Modified Time: 2022-10-16 03:25:33 UTC
 # Description: Thanks to bigbugcc @ https://github.com/bigbugcc/OpenWrts
 # Description: Thanks to P3TERX @ https://github.com/P3TERX/Actions-OpenWrt
 # Description: Thanks to SuLingGG @ https://github.com/SuLingGG/OpenWrt-Rpi
 # ┏┛ ┻━━━━━┛ ┻┓
 # ┃           ┃
 # ┃      ━     ┃
 # ┃  ┳┛    ┗┳   ┃
 # ┃           ┃
 # ┃      ┻     ┃
 # ┃           ┃
 # ┗━┓      ┏━━━┛
 #   ┃      ┃   神兽保佑
 #   ┃      ┃   代码无虫
 #   ┃      ┗━━━━━━━━━┓
 #   ┃                ┣┓
 #   ┃               ┏┛
 #   ┗━┓ ┓ ┏━━━┳ ┓ ┏━┛
 #     ┃ ┫ ┫   ┃ ┫ ┫
 #    ┗━┻━┛   ┗━┻━┛
##**********************************************************************/


name: Env Test

on:
  workflow_dispatch:
  #watch:
  # types: [started]

env:
  SOURCE_URL: https://github.com/coolsnowwolf/lede
  SOURCE_BRANCH: master
  CONFIG_FILE: configs/x86_64.config
  DIY_SH: diy.sh
  FIX_SH: fix.sh
  FEEDS_SH: feeds.sh
  IMAGE_TAG: x86_64
  TOOLCHAIN_TAG: toolchain-x86_64
  TOOLCHAIN_NAME: toolchain-image-x86_64
  TOOLCHAIN_RELEASE_UPLOAD: true
  FIRMWARE_RELEASE_UPLOAD: true
  FREE_UP_DISK: true
  COMBINE_DISK: true
  TZ: Asia/Shanghai

jobs:
  Toolchain:
    runs-on: ubuntu-22.04

    outputs:
      OPENWRT_ROOT_PATH: ${{ steps.clone.outputs.OPENWRT_ROOT_PATH }}
      TOOLCHAIN_OUTPUT: ${{ steps.clone.outputs.TOOLCHAIN_OUTPUT }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_OWNER: ${{ steps.env.outputs.SOURCE_OWNER }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_PLATFORM: ${{ steps.env.outputs.DEVICE_PLATFORM }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}
      BUILD_DATE: ${{ steps.env.outputs.BUILD_DATE }}

    steps:
      - name: Setup Variables
        run: |
          git config --global init.defaultBranch main
          git config --global advice.detachedHead false

      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get update
          sudo -E apt-get upgrade -qq -y
          sudo -E apt-get -y install $(cat $GITHUB_WORKSPACE/openwrt-env)
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get -y clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          mkdir workspace

      - name: Clone Openwrt Source
        id: clone
        run: |
          git clone $SOURCE_URL -b $SOURCE_BRANCH workspace/openwrt
          cd workspace/openwrt
          echo "OPENWRT_ROOT_PATH=$PWD" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$PWD" >> $GITHUB_OUTPUT

          mkdir -p $GITHUB_WORKSPACE/output
          cd $GITHUB_WORKSPACE/output
          export TOOLCHAIN_OUTPUT="$(pwd)"
          echo "TOOLCHAIN_OUTPUT=$TOOLCHAIN_OUTPUT" >> $GITHUB_ENV
          echo "TOOLCHAIN_OUTPUT=$TOOLCHAIN_OUTPUT" >> $GITHUB_OUTPUT

      - name: Generate Toolchain Config
        run: |
          cp $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL=y" >> $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL_NONSHARED=y" >> $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          make defconfig > /dev/null 2>&1

      - name: Generate Variables
        id: env
        run: |
          cd $GITHUB_WORKSPACE
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_OUTPUT

          cd $OPENWRT_ROOT_PATH
          export SOURCE_OWNER="$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')"
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_OUTPUT

          export SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_OUTPUT

          export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_OUTPUT

          export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_OUTPUT

          export DEVICE_PLATFORM=$(cat .config | grep CONFIG_TARGET_ARCH_PACKAGES | awk -F '"' '{print $2}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_OUTPUT

          export TOOLCHAIN_IMAGE="toolchain-$DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_OUTPUT

          export BUILD_DATE=$(date +"%Y-%m-%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_OUTPUT

      - name: Compare Toolchain Hash
        id: hash
        run: |
          cd $OPENWRT_ROOT_PATH
          export CURRENT_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain)
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_OUTPUT
          echo "CURRENT_HASH is $CURRENT_HASH"
          export CACHE_HASH=$(curl -fSsL https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE.hash)
          echo "CACHE_HASH is $CACHE_HASH"
          if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
            echo "REBUILD_TOOLCHAIN=true" >> $GITHUB_OUTPUT
          fi

      - name: Compile Tools
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          echo "$(nproc) threads compile tools"

      - name: Compile Toolchain
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          echo "$(nproc) threads compile toolchain"

      - name: Generate Toolchain Image
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd workspace
          echo "Generate Toolchain Image"

      - name: Upload Toolchain Image To Artifact
        if: env.TOOLCHAIN_RELEASE_UPLOAD != 'true' && steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          echo "Upload Toolchain Image To Artifact"

      - name: Delete Toolchain Image From Release
        if: env.TOOLCHAIN_RELEASE_UPLOAD == 'true' && steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          echo "Delete Toolchain Image From Release"

      - name: Upload Toolchain Image To Release
        if: env.TOOLCHAIN_RELEASE_UPLOAD == 'true' && steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          echo "Upload Toolchain Image To Release"

  Build:
    needs: [Toolchain]
    runs-on: ubuntu-22.04

    steps:
      - name: Combine Disks
        if: env.COMBINE_DISK == 'true'
        run: |
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          export ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          export ROOT_LOOP_KB=$(expr $ROOT_FREE_KB - 1048576)
          export ROOT_LOOP_BYTES=$(expr $ROOT_LOOP_KB \* 1024)
          sudo fallocate -l $ROOT_LOOP_BYTES /root.img
          export ROOT_LOOP_DEVNAME=$(sudo losetup -Pf --show /root.img)
          sudo pvcreate -f $ROOT_LOOP_DEVNAME
          export MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          export MNT_LOOP_KB=$(expr $MNT_FREE_KB - 102400)
          export MNT_LOOP_BYTES=$(expr $MNT_LOOP_KB \* 1024)
          sudo fallocate -l $MNT_LOOP_BYTES /mnt/mnt.img
          export MNT_LOOP_DEVNAME=$(sudo losetup -Pf --show /mnt/mnt.img)
          sudo pvcreate -f $MNT_LOOP_DEVNAME
          sudo vgcreate vgstorage $ROOT_LOOP_DEVNAME $MNT_LOOP_DEVNAME
          sudo lvcreate -n lvstorage -l 100%FREE vgstorage
          export LV_DEVNAME=$(sudo lvscan | awk -F "'" '{print $2}')
          sudo mkfs.btrfs -L combinedisk $LV_DEVNAME
          sudo mount -o compress=zstd $LV_DEVNAME $GITHUB_WORKSPACE
          sudo chown -R runner:runner $GITHUB_WORKSPACE
          mkdir -p $GITHUB_WORKSPACE/tmp
          chmod 0777 $GITHUB_WORKSPACE/tmp
          sudo cp -rp /tmp/* $GITHUB_WORKSPACE/tmp
          sudo mount -B $GITHUB_WORKSPACE/tmp /tmp
          df -hT $GITHUB_WORKSPACE
          sudo btrfs filesystem usage $GITHUB_WORKSPACE

      - name: Restore Variables
        run: |
          git config --global init.defaultBranch main
          git config --global advice.detachedHead false
          echo "CURRENT_BRANCH=$(echo '${{needs.Toolchain.outputs.CURRENT_BRANCH}}')" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$(echo '${{needs.Toolchain.outputs.OPENWRT_ROOT_PATH}}')" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$(echo '${{needs.Toolchain.outputs.SOURCE_OWNER}}')" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo '${{needs.Toolchain.outputs.SOURCE_REPO}}')" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$(echo '${{needs.Toolchain.outputs.DEVICE_PLATFORM}}')" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_TARGET}}')" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_SUBTARGET}}')" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=$(echo '${{needs.Toolchain.outputs.TOOLCHAIN_IMAGE}}')" >> $GITHUB_ENV
          echo "BUILD_DATE=$(echo '${{needs.Toolchain.outputs.BUILD_DATE}}')" >> $GITHUB_ENV

      - name: Checkout
        run: |
          cd $GITHUB_WORKSPACE
          git init
          git remote add origin https://github.com/$GITHUB_REPOSITORY
          git fetch --depth 1 origin $GITHUB_REF
          git checkout -t origin/$CURRENT_BRANCH

      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get update
          sudo -E apt-get upgrade -qq -y
          sudo -E apt-get -y install $(cat $GITHUB_WORKSPACE/openwrt-env)
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get -y clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Download Toolchain Image From Artifacts
        if: env.TOOLCHAIN_RELEASE_UPLOAD != 'true'
        run: |
          echo "Download Toolchain Image From Artifacts"

      - name: Prepare Toolchain Image From Artifacts
        if: env.TOOLCHAIN_RELEASE_UPLOAD != 'true'
        run: |
          echo "Prepare Toolchain Image From Artifacts"

      - name: Prepare Toolchain Image From Releases
        if: env.TOOLCHAIN_RELEASE_UPLOAD == 'true'
        run: |
          echo "Prepare Toolchain Image From Releases"

      - name: Load Custom Feeds
        run: |
          cp $FEEDS_SH $OPENWRT_ROOT_PATH/$FEEDS_SH
          chmod +x $OPENWRT_ROOT_PATH/$FEEDS_SH
          cd $OPENWRT_ROOT_PATH
          ./$FEEDS_SH
          
      - name: Install Feeds
        run: |
          cd $OPENWRT_ROOT_PATH
          ./scripts/feeds clean
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          cp $DIY_SH $OPENWRT_ROOT_PATH/$DIY_SH
          cp $FIX_SH $OPENWRT_ROOT_PATH/$FIX_SH
          cp $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          chmod +x $OPENWRT_ROOT_PATH/$DIY_SH
          chmod +x $OPENWRT_ROOT_PATH/$FIX_SH
          cd $OPENWRT_ROOT_PATH
          ./$FIX_SH
          ./$DIY_SH
          make defconfig

      - name: Free Up Disk Space
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "Prepare Toolchain Image From Releases"

      - name: Download Packages
        id: download
        run: |
          cd $OPENWRT_ROOT_PATH
          echo "Download Packages"

      - name: Compile Packages
        run: |
          cd $OPENWRT_ROOT_PATH
          echo "$(nproc) threads compile packages"

      - name: Generate Firmware
        id: generate
        run: |
          cd $OPENWRT_ROOT_PATH
          echo "Generate Firmware"

      - name: Print Sha256sums
        run: |
          echo "Print Sha256sums"

      - name: Compress Bin Folder
        run: |
          cd $OPENWRT_ROOT_PATH
          echo "Compress Bin Folder"

      - name: Print Disk Usage
        if: always()
        run: |
          echo "lsblk -f"
          lsblk -f
          echo -e "============================\n"
          echo "df -hT"
          df -hT
          echo -e "============================\n"

      - name: Print Btrfs Usage
        if: env.COMBINE_DISK == 'true'
        run: |
          echo "btrfs filesystem usage"
          sudo btrfs filesystem usage $GITHUB_WORKSPACE
          echo -e "============================\n"

      - name: Upload Bin Archive
        run: |
          echo "Upload Bin Archive"

  Upload:
    needs: [Build, Toolchain]
    runs-on: ubuntu-22.04

    steps:
      - name: Restore Variables
        run: |
          git config --global init.defaultBranch main
          git config --global advice.detachedHead false
          echo "CURRENT_BRANCH=$(echo '${{needs.Toolchain.outputs.CURRENT_BRANCH}}')" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$(echo '${{needs.Toolchain.outputs.OPENWRT_ROOT_PATH}}')" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$(echo '${{needs.Toolchain.outputs.SOURCE_OWNER}}')" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo '${{needs.Toolchain.outputs.SOURCE_REPO}}')" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$(echo '${{needs.Toolchain.outputs.DEVICE_PLATFORM}}')" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_TARGET}}')" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_SUBTARGET}}')" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=$(echo '${{needs.Toolchain.outputs.TOOLCHAIN_IMAGE}}')" >> $GITHUB_ENV
          echo "BUILD_DATE=$(echo '${{needs.Toolchain.outputs.BUILD_DATE}}')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get update
          sudo -E apt-get upgrade -qq -y
          sudo -E apt-get -y install zip unzip rsync
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Download Bin Archive
        run: |
          echo "Download Bin Archive"

      - name: Decompress Bin Archive
        run: |
          echo "Decompress Bin Archive"

      - name: Organize Files
        run: |
          echo "Organize Files"

      - name: Delete Files From Release
        if: env.FIRMWARE_RELEASE_UPLOAD == 'true'
        run: |
          echo "Delete Files From Release"

      - name: Deploy Files To Release
        if: env.FIRMWARE_RELEASE_UPLOAD == 'true'
        run: |
          echo "Deploy Files To Release"

