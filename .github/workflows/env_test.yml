##************************************************************************
 # File Name: env_test.yml
 # Author: ecras_y@163.com
 # Created Time: 2022-07-16 15:39:29 UTC
 # Modified Time: 2022-09-24 20:54:04 CST
 # Description: Thanks to bigbugcc @ https://github.com/bigbugcc/OpenWrts
 # Description: Thanks to P3TERX @ https://github.com/P3TERX/Actions-OpenWrt
 # Description: Thanks to SuLingGG @ https://github.com/SuLingGG/OpenWrt-Rpi
 # ┏┛ ┻━━━━━┛ ┻┓
 # ┃           ┃
 # ┃      ━     ┃
 # ┃  ┳┛    ┗┳   ┃
 # ┃           ┃
 # ┃      ┻     ┃
 # ┃           ┃
 # ┗━┓      ┏━━━┛
 #   ┃      ┃   神兽保佑
 #   ┃      ┃   代码无虫
 #   ┃      ┗━━━━━━━━━┓
 #   ┃                ┣┓
 #   ┃               ┏┛
 #   ┗━┓ ┓ ┏━━━┳ ┓ ┏━┛
 #     ┃ ┫ ┫   ┃ ┫ ┫
 #    ┗━┻━┛   ┗━┻━┛
#***********************************************************************/

name: Test Env

on:
  repository_dispatch:
  workflow_dispatch:
  #schedule:
  #  - cron: 0 18 * * *
  # watch:
  #   types: started

env:
  SOURCE_URL: https://github.com/coolsnowwolf/lede
  SOURCE_BRANCH: master
  CONFIG_FILE: configs/x86_64_test.config
  DIY_SH: diy.sh
  FIX_SH: fix.sh
  FEEDS_SH: feeds.sh
  TOOLCHAIN_TAG: toolchain-test
  TOOLCHAIN_RELEASE_UPLOAD: true
  FIRMWARE_RELEASE_UPLOAD: true
  FREE_UP_DISK: true
  COMBINE_DISK: true
  TZ: Asia/Shanghai

jobs:
  Toolchain:
    runs-on: ubuntu-20.04

    outputs:
      OPENWRT_ROOT_PATH: ${{ steps.clone.outputs.OPENWRT_ROOT_PATH }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_OWNER: ${{ steps.env.outputs.SOURCE_OWNER }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_PLATFORM: ${{ steps.env.outputs.DEVICE_PLATFORM }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}

    steps:
      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/ecrasy/BuildOpenwrt/main/openwrt-env)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          docker image prune -a -f
          git config --global init.defaultBranch main
          mkdir -p workspace

      - name: Checkout
        uses: actions/checkout@main

      - name: Clone Source Code
        id: clone
        run: |
          df -hT $PWD
          git clone $SOURCE_URL -b $SOURCE_BRANCH workspace/openwrt
          cd workspace/openwrt
          echo "OPENWRT_ROOT_PATH=$PWD" >> $GITHUB_ENV
          echo "::set-output name=OPENWRT_ROOT_PATH::$(echo $PWD)"

      - name: Generate Toolchain Config
        run: |
          cp $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL=y" >> $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL_NONSHARED=y" >> $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          make defconfig > /dev/null 2>&1

      - name: Generate Variables
        id: env
        run: |
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_BRANCH::$(echo $CURRENT_BRANCH)"
          cd $OPENWRT_ROOT_PATH
          export SOURCE_OWNER="$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')"
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_ENV
          echo "::set-output name=SOURCE_OWNER::$(echo $SOURCE_OWNER)"
          export SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          echo "::set-output name=SOURCE_REPO::$(echo $SOURCE_REPO)"
          export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_TARGET::$(echo $DEVICE_TARGET)"
          export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_SUBTARGET::$(echo $DEVICE_SUBTARGET)"
          export DEVICE_PLATFORM=$(cat .config | grep CONFIG_TARGET_ARCH_PACKAGES | awk -F '"' '{print $2}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_PLATFORM::$(echo $DEVICE_PLATFORM)"
          export TOOLCHAIN_IMAGE="toolchain-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_ENV
          echo "::set-output name=TOOLCHAIN_IMAGE::$(echo $TOOLCHAIN_IMAGE)"
          export BUILD_DATE=$(date +"%Y-%m-%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      - name: Compare Toolchain Hash
        id: hash
        run: |
          cd $OPENWRT_ROOT_PATH
          export CURRENT_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain)
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_HASH::$(echo $CURRENT_HASH)"
          echo "CURRENT_HASH is $CURRENT_HASH"
          export CACHE_HASH=$(curl -fSsL https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE.hash)
          echo "CACHE_HASH is $CACHE_HASH"
          if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
            echo "::set-output name=REBUILD_TOOLCHAIN::true"
          fi

